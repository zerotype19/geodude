name: v2.1 QA Monitor

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      slack_webhook:
        description: 'Slack webhook URL (optional)'
        required: false
        type: string
      email:
        description: 'Email address (optional)'
        required: false
        type: string

jobs:
  qa-monitor:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd geodude
          npm install
          npm install -g tsx
          
      - name: Run QA monitoring job
        run: |
          cd geodude
          tsx scripts/scheduled_qa_job.ts \
            --slack-webhook="${{ github.event.inputs.slack_webhook || '' }}" \
            --email="${{ github.event.inputs.email || '' }}"
        env:
          NODE_ENV: production
          
      - name: Upload QA logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-metrics-${{ github.run_number }}
          path: geodude/qa_metrics_*.json
          retention-days: 30
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'geodude/qa_metrics_*.json';
            
            try {
              const files = require('glob').sync(path);
              if (files.length > 0) {
                const metrics = JSON.parse(fs.readFileSync(files[0], 'utf8'));
                const latest = metrics[metrics.length - 1];
                
                const comment = `## 🔍 v2.1 QA Report
                
**System Health**: ${latest.system_health.toUpperCase()}
**v2.1 Audits (24h)**: ${latest.v21_audits_24h}
**Average Overall Score**: ${latest.avg_v21_overall.toFixed(1)}%
**Error Rate**: ${latest.error_rate.toFixed(1)}%

${latest.alerts.length > 0 ? `**Alerts**:\n${latest.alerts.map(a => `- ${a}`).join('\n')}` : '✅ No alerts'}`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not generate QA comment:', error.message);
            }
